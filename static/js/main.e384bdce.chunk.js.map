{"version":3,"sources":["components/Basic-Info.js","components/Skills.js","components/Summary.js","components/WorkExperience.js","components/Education.js","App.js","index.js"],"names":["BasicInfo","props","toggleEditMode","event","setState","editMode","state","handleNameChange","name","target","value","handlePhoneChange","phoneNumber","handleEmailChange","emailAddress","handleGitHubChange","gitHub","saveEdit","nameBackup","phoneNumberBackup","emailAddressBackup","gitHubBackup","savedName","cancelEdit","nameBackUp","phoneNumberBackUp","emailAddressBackUp","gitHubBackUp","renderEditMode","id","type","placeholder","onChange","className","onClick","this","Component","Skills","handleNewSkill","newSkill","addSkill","newSkillsArray","skills","deleteSkill","splice","map","element","data-index","indexOf","Summary","handleChange","summary","summaryBackup","savedSummary","summaryBackUp","WorkExperience","handleNewTitle","newTitle","handleNewCompany","newCompany","handleYearStart","yearStart","handleYearEnd","yearEnd","handleNewSummary","newSummary","deleteJob","newJobsArray","jobs","addNewWorkExperience","newJob","jobTitle","company","yearsWorked","generateYearsWorked","Education","handleNewUniversity","newUniversity","handleNewDegree","newDegree","deleteEducation","newEducationArray","education","addNewEducation","newEducation","yearsStudied","generateYearsStudied","university","degree","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e384bdce.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n// This is the primary source component \r\nexport class BasicInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editMode: false,\r\n\r\n            name: 'Your Name',\r\n            phoneNumber: '123-456-7890',\r\n            emailAddress: 'example@example.com',\r\n            gitHub: 'GitHub URL',\r\n\r\n          /* this state exists as the reference point for the name is updated on save. It prevents updating in real time as the user types since\r\n             it screws with the syling if the name is long */ \r\n            savedName: 'Your Name',\r\n            \r\n            // These backups are here if the user makes edits but wants to cancel and revert back\r\n            nameBackUp: 'Your Name',\r\n            phoneNumberBackUp: '123-456-7890',\r\n            emailAddressBackUp: 'example@example.com',\r\n            gitHubBackUp: 'GitHub URL',\r\n        };\r\n\r\n    };\r\n\r\n     toggleEditMode = (event) => {\r\n         // this function toggles edit mode on and off\r\n        this.setState({editMode: !this.state.editMode})\r\n        }\r\n\r\n        handleNameChange = (event) => {\r\n            this.setState({\r\n                name: event.target.value\r\n            })\r\n        }\r\n\r\n        handlePhoneChange = (event) => {\r\n            this.setState({\r\n                phoneNumber: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleEmailChange = (event) => {\r\n            this.setState({\r\n                emailAddress: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleGitHubChange = (event) => {\r\n            this.setState({\r\n                gitHub: event.target.value\r\n            })\r\n        }\r\n\r\n        saveEdit = () => {\r\n            //this function saves the new backups before exiting edit mode\r\n            this.setState({nameBackup: this.state.name});\r\n            this.setState({phoneNumberBackup: this.state.phoneNumber});\r\n            this.setState({emailAddressBackup: this.state.emailAddress});\r\n            this.setState({gitHubBackup: this.state.gitHub});\r\n\r\n            //it also updates the savedName state so the name changes only after the user hits save\r\n            this.setState({savedName: this.state.name});\r\n\r\n            this.toggleEditMode();\r\n        }\r\n\r\n        cancelEdit = () => {\r\n            // this function reverts the values back to their backups before canceling edit mode\r\n            this.setState({name: this.state.nameBackUp});\r\n            this.setState({phoneNumber: this.state.phoneNumberBackUp});\r\n            this.setState({emailAddress: this.state.emailAddressBackUp});\r\n            this.setState({gitHub: this.state.gitHubBackUp});\r\n\r\n            this.toggleEditMode();\r\n        }\r\n\r\n        \r\n        // this function handles the information edits\r\n        renderEditMode = () => {\r\n            return (\r\n                <form id=\"basic-info-edit\">\r\n                    <input name=\"name\" id=\"input_name\" type=\"text\" value={this.state.name} placeholder=\"Type your name...\" onChange={this.handleNameChange}/>\r\n                    <label> Phone:\r\n                        <input name=\"phone\" type=\"tel\" value={this.state.phoneNumber} placeholder=\"eg. 123-456-7890\" onChange={this.handlePhoneChange}/>\r\n                    </label>\r\n                    <label> Email:\r\n                        <input name=\"emailAddress\" type=\"email\" value={this.state.emailAddress} placeholder=\"example@example.com\" onChange={this.handleEmailChange}/>\r\n                    </label>\r\n                    <label>GitHub:\r\n                        <input name=\"gitHub\" value={this.state.gitHub} placeholder=\"GitHub URL\" onChange={this.handleGitHubChange}/>\r\n                    </label>\r\n                    <button type=\"button\" className=\"button_primary\" onClick={this.saveEdit}>Save</button>\r\n                    <button type=\"button\" className=\"button_secondary\" onClick={this.cancelEdit}>Cancel</button>\r\n                </form>\r\n            )\r\n        }\r\n\r\n    render() {\r\n\r\n    return (\r\n        <div id=\"basic-info-parent\" className=\"section-container\">\r\n            <h2 id=\"name\">{this.state.savedName}</h2>\r\n            {/* If edit mode is on, the component will re-render in edit mode. Otherwise it renders in display mode */}\r\n            {this.state.editMode\r\n            ? this.renderEditMode()\r\n            : <div id=\"basic-info-details\"> \r\n              {/* this is normal mode */}\r\n              <button type=\"button\" className=\"button_edit\" onClick={this.toggleEditMode}><i className=\"far fa-edit\"></i></button>\r\n              <ul id=\"list_basic-info\">\r\n                  <li>{this.state.phoneNumber}</li>\r\n                  <li>{this.state.emailAddress}</li>\r\n                  <li>{this.state.gitHub}</li>\r\n              </ul>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n};\r\n\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n// This is the primary source component \r\nexport class Skills extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editMode: false,\r\n            skills: ['HTML', 'CSS', 'Javascript', 'React', 'Visual Design'],\r\n            newSkill: '',\r\n        };\r\n\r\n    };\r\n\r\n        toggleEditMode = (event) => {\r\n         // this function toggles edit mode on and off\r\n        this.setState({editMode: !this.state.editMode})\r\n        }\r\n\r\n        handleNewSkill = (event) => {\r\n            this.setState({newSkill: event.target.value});\r\n        }\r\n\r\n\r\n        addSkill = (props) => {\r\n            let newSkill = this.state.newSkill;\r\n            let newSkillsArray = [...this.state.skills, newSkill];\r\n\r\n            this.setState({skills: newSkillsArray});\r\n            this.setState({newSkill: ''});\r\n        }\r\n\r\n        deleteSkill = (props) => {\r\n            let newSkillsArray = [...this.state.skills];\r\n            newSkillsArray.splice(props, 1);\r\n            \r\n            this.setState({skills: newSkillsArray});\r\n        }\r\n\r\n        \r\n        // this function handles the information edits\r\n        renderEditMode = () => {\r\n            return (\r\n                <form id=\"basic-info-edit\">\r\n                    {/* This renders the list of elements */}\r\n                    <ul id=\"skills-list-edit\">\r\n                        {this.state.skills.map(element => {\r\n                            return <li key={this.state.skills.indexOf(element)} data-index={this.state.skills.indexOf(element)}>{element}</li>\r\n                        })}\r\n                    \r\n                    {/* This renders the bin icons to delete the skill it's paired with by index #*/}\r\n                    {this.state.skills.map(element => {\r\n                        return <button type=\"button\" \r\n                                key={\"delete-\" + element }\r\n                                className=\"button_delete\" \r\n                                data-index={this.state.skills.indexOf(element)}\r\n                                onClick={() => this.deleteSkill(this.state.skills.indexOf(element))}>\r\n                                <i className=\"far fa-trash-alt\"></i>\r\n                                </button>\r\n                    })}\r\n                    </ul>\r\n                    <div id=\"new-skill-container\">\r\n                        <input id=\"input_new-skill\" \r\n                        value={this.state.newSkill} \r\n                        placeholder=\"Add additional skills\"\r\n                        onChange={this.handleNewSkill}>\r\n                        </input>\r\n                        <button type=\"button\" id=\"button_new-skill\" onClick={this.addSkill}><i className=\"fas fa-arrow-right\"></i></button>\r\n                    </div>\r\n                    <button type=\"button\" className=\"button_primary\" onClick={this.toggleEditMode}>Save</button>\r\n                </form>\r\n            )\r\n        }\r\n\r\n    render() {\r\n\r\n    return (\r\n        <div id=\"skills-parent\" className=\"section-container\">\r\n            <h2 id=\"skills\">Skills</h2>\r\n            {/* If edit mode is on, the component will re-render in edit mode. Otherwise it renders the list from the skills array */}\r\n            {this.state.editMode\r\n            ? this.renderEditMode()\r\n            : <div id=\"skills-container\">\r\n                <ul id=\"skills-list\">\r\n                    {this.state.skills.map(element => {\r\n                        return <li key={element}>{element}</li>\r\n                    })}\r\n                </ul>\r\n                <button type=\"button\" className=\"button_edit\" onClick={this.toggleEditMode}><i className=\"far fa-edit\"></i></button>\r\n              </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n};\r\n\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n// This is the primary source component \r\nexport class Summary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editMode: false,\r\n\r\n            summary: 'I am a frontend developer with a background in UX, visual design, video, and marketing. Rooted in atomic design principles, I am most passionate about effective design systems and developing high-quality user experiences that speak for the product and brand. I am experienced and comfortable working in an agile environment - both in an office and remote.',\r\n\r\n\r\n          /* this state exists as the reference point for the name is updated on save. It prevents updating in real time as the user types since\r\n             it screws with the syling if the name is long */ \r\n            savedSummary: 'I am a frontend developer with a background in UX, visual design, video, and marketing. Rooted in atomic design principles, I am most passionate about effective design systems and developing high-quality user experiences that speak for the product and brand. I am experienced and comfortable working in an agile environment - both in an office and remote.',\r\n            \r\n            // This backup is here if the user makes edits but wants to cancel and revert back\r\n            summaryBackUp: 'I am a frontend developer with a background in UX, visual design, video, and marketing. Rooted in atomic design principles, I am most passionate about effective design systems and developing high-quality user experiences that speak for the product and brand. I am experienced and comfortable working in an agile environment - both in an office and remote.',\r\n        };\r\n\r\n    };\r\n\r\n        toggleEditMode = (event) => {\r\n            // this function toggles edit mode on and off\r\n            this.setState({editMode: !this.state.editMode})\r\n            }\r\n\r\n        handleChange = (event) => {\r\n            this.setState({\r\n                summary: event.target.value\r\n            })\r\n        }\r\n\r\n        saveEdit = () => {\r\n            //this function saves the new backups before exiting edit mode\r\n            this.setState({summaryBackup: this.state.summary});\r\n\r\n            //it also updates the savedSummary state so the summary changes only after the user hits save\r\n            this.setState({savedSummary: this.state.summary});\r\n\r\n            this.toggleEditMode();\r\n        }\r\n\r\n        cancelEdit = () => {\r\n            // this function reverts the value back to it's backup before canceling edit mode\r\n            this.setState({summary: this.state.summaryBackUp});\r\n\r\n            this.toggleEditMode();\r\n        }\r\n\r\n        \r\n        // this function handles the information edits\r\n        renderEditMode = () => {\r\n            return (\r\n                <form id=\"summary-edit\">\r\n                    <label>Summary\r\n                        <textarea id=\"textarea_summary\" value={this.state.summary} onChange={this.handleChange} placeholder=\"Type your summary here\"></textarea>\r\n                    </label>\r\n                    <button type=\"button\" className=\"button_primary\" onClick={this.saveEdit}>Save</button>\r\n                    <button type=\"button\" className=\"button_secondary\" onClick={this.cancelEdit}>Cancel</button>\r\n                </form>\r\n            )\r\n        }\r\n\r\n    render() {\r\n\r\n    return (\r\n        <div id=\"summary-parent\" className=\"section-container\">\r\n            <h2 id=\"summary\">Summary</h2>\r\n            {/* If edit mode is on, the component will re-render in edit mode. Otherwise it renders in display mode */}\r\n            {this.state.editMode\r\n            ? this.renderEditMode()\r\n            : <div id=\"basic-info-details\"> \r\n              {/* this is normal mode */}\r\n              <p>{this.state.savedSummary}</p>\r\n              <button type=\"button\" className=\"button_edit\" onClick={this.toggleEditMode}><i className=\"far fa-edit\"></i></button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n};\r\n\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n// This is the primary source component \r\nexport class WorkExperience extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editMode: false,\r\n\r\n            jobs: [ \r\n                {\r\n                jobTitle: 'Job Title', \r\n                company: 'Company Name', \r\n                yearsWorked: '2018-2020', \r\n                summary: 'A summary of job responsibilities',\r\n            }],\r\n\r\n            newTitle: '',\r\n            newCompany: '',\r\n            yearStart: '',\r\n            yearEnd: '',\r\n            newSummary: '',\r\n        };\r\n\r\n    };\r\n\r\n     toggleEditMode = (event) => {\r\n         // this function toggles edit mode on and off\r\n        this.setState({editMode: !this.state.editMode})\r\n        }\r\n\r\n        handleNewTitle = (event) => {\r\n            this.setState({\r\n                newTitle: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleNewCompany = (event) => {\r\n            this.setState({\r\n                newCompany: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleYearStart = (event) => {\r\n            this.setState({\r\n                yearStart: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleYearEnd = (event) => {\r\n            this.setState({\r\n                yearEnd: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleNewSummary = (event) => {\r\n            this.setState({\r\n                newSummary: event.target.value\r\n            })\r\n        }\r\n        \r\n        deleteJob = (props) => {\r\n            let newJobsArray = [...this.state.jobs]\r\n            newJobsArray.splice(props, 1);\r\n\r\n            this.setState({jobs: newJobsArray});\r\n        }\r\n        \r\n        //this function constructs a new job object before adding it to the jobs array state\r\n        addNewWorkExperience = () => {\r\n            let newJob;\r\n\r\n            const generateYearsWorked = () => {\r\n                //this function converts the yearEnd and yearStart to one string\r\n                let yearStart = this.state.yearStart;\r\n                let yearEnd = this.state.yearEnd;\r\n\r\n                let yearsWorked = `${yearStart}-${yearEnd}`;\r\n                return yearsWorked\r\n            }\r\n\r\n            newJob = {\r\n                jobTitle: this.state.newTitle,\r\n                company: this.state.newCompany,\r\n                yearsWorked: generateYearsWorked(),\r\n                summary: this.state.newSummary\r\n            }\r\n            \r\n            const newJobsArray = [...this.state.jobs, newJob];\r\n            this.setState({\r\n                jobs: newJobsArray,\r\n                newTitle: '',\r\n                newCompany: '',\r\n                yearStart: '',\r\n                yearEnd: '',\r\n                newSummary: '',\r\n            });\r\n\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        // this function handles the information edits\r\n        renderEditMode = () => {\r\n            return (\r\n                <div id=\"jobs-list-edit\">\r\n                    {this.state.jobs.map(element => {\r\n                        return (\r\n                            <div key={element.company + \"-container-edit\"}className=\"job-container\">\r\n                                <h3 key={element.company + \"-title-edit\"}className=\"job_position\">{element.jobTitle}</h3>\r\n                                <p key={element.company + \"-company-edit\"}className=\"job_company\">{element.company}</p>\r\n                                <p key={element.company + \"-years-edit\"}className=\"job_years\">{element.yearsWorked}</p>\r\n                                <p key={element.company + \"-summary-edit\"}className=\"job_summary\">{element.summary}</p>\r\n                                <button type=\"button\" className=\"button_delete-work\" onClick={() => this.deleteJob(this.state.jobs.indexOf(element))}> <i className=\"far fa-trash-alt\"></i></button>\r\n                            </div>\r\n                        )\r\n                    })}\r\n\r\n                    <form id=\"work-experience-edit\">\r\n                        <label>Job Title:\r\n                            <input value={this.state.newTitle} onChange={this.handleNewTitle}></input>\r\n                        </label>\r\n                        <label>Company:\r\n                            <input value={this.state.newCompany} onChange={this.handleNewCompany}></input>\r\n                        </label>\r\n                        <label>Start year:\r\n                            <input value={this.state.yearStart} onChange={this.handleYearStart} placeholder=\"eg 2018\"/>\r\n                        </label>\r\n                        <label>End year:\r\n                            <input value={this.state.yearEnd} onChange={this.handleYearEnd} placeholder=\"eg 2020\"/>\r\n                        </label>\r\n                        <label>Job Summary:\r\n                            <textarea id=\"textarea_job-summary\" value={this.state.newSummary} onChange={this.handleNewSummary} placeholder=\"A brief summary of your work experience\"></textarea>\r\n                        </label>\r\n                        <button type=\"button\" id=\"button_add-work\" className=\"button_primary\" onClick={this.addNewWorkExperience}>Add Job <i className=\"fas fa-arrow-right\"></i></button>\r\n                    </form>\r\n                        <button type=\"button\" className=\"button_primary\" onClick={this.toggleEditMode}>Done</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    render() {\r\n\r\n    return (\r\n        <div id=\"work-experience-parent\" className=\"section-container\">\r\n            <h2 id=\"work-experience\">Work Experience</h2>\r\n            {/* If edit mode is on, the component will re-render in edit mode. Otherwise it renders in display mode */}\r\n            {this.state.editMode\r\n            ? this.renderEditMode()\r\n            : <div id=\"work-experience-details\"> \r\n              {/* this function renders the list of jobs */}\r\n                {this.state.jobs.map(element => {\r\n                   return (\r\n                        <div key={element.company + \"-container\"}className=\"job-container\">\r\n                            <h3 key={element.company + \"-title\"}className=\"job_position\">{element.jobTitle}</h3>\r\n                            <p key={element.company + \"-company\"}className=\"job_company\">{element.company}</p>\r\n                            <p key={element.company + \"-years\"}className=\"job_years\">{element.yearsWorked}</p>\r\n                            <p key={element.company + \"-summary\"}className=\"job_summary\">{element.summary}</p>\r\n                        </div>\r\n                   )\r\n                })}\r\n                <button type=\"button\" className=\"button_edit\" onClick={this.toggleEditMode}><i className=\"far fa-edit\"></i></button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n};\r\n\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n// This is the primary source component \r\nexport class Education extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            editMode: false,\r\n\r\n            education: [ \r\n                {\r\n                yearsStudied: '2013-2017',\r\n                university: 'Loyola University New Orleans',\r\n                degree: \"B.A. Mass Communication\"\r\n            }],\r\n\r\n            yearStart: '',\r\n            yearEnd: '',\r\n            newUniversity: '',\r\n            newDegree: '',\r\n        };\r\n\r\n    };\r\n\r\n     toggleEditMode = (event) => {\r\n         // this function toggles edit mode on and off\r\n        this.setState({editMode: !this.state.editMode})\r\n        }\r\n\r\n        handleNewUniversity = (event) => {\r\n            this.setState({\r\n                newUniversity: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleNewDegree = (event) => {\r\n            this.setState({\r\n                newDegree: event.target.value\r\n            })\r\n        }\r\n\r\n        handleYearStart = (event) => {\r\n            this.setState({\r\n                yearStart: event.target.value\r\n            })\r\n        }\r\n        \r\n        handleYearEnd = (event) => {\r\n            this.setState({\r\n                yearEnd: event.target.value\r\n            })\r\n        }\r\n\r\n        \r\n        \r\n        deleteEducation = (props) => {\r\n            let newEducationArray = [...this.state.education]\r\n            newEducationArray.splice(props, 1);\r\n\r\n            this.setState({education: newEducationArray});\r\n        }\r\n        \r\n        //this function constructs a new job object before adding it to the education array state\r\n        addNewEducation = () => {\r\n            let newEducation;\r\n\r\n            const generateYearsStudied = () => {\r\n                //this function converts the yearEnd and yearStart to one string\r\n                let yearStart = this.state.yearStart;\r\n                let yearEnd = this.state.yearEnd;\r\n\r\n                let yearsWorked = `${yearStart}-${yearEnd}`;\r\n                return yearsWorked\r\n            }\r\n\r\n            newEducation = {\r\n                yearsStudied: generateYearsStudied(),\r\n                university: this.state.newUniversity,\r\n                degree: this.state.newDegree,\r\n            }\r\n            \r\n            const newEducationArray = [...this.state.education, newEducation];\r\n            this.setState({\r\n                education: newEducationArray,\r\n                newUniversity: '',\r\n                newDegree: '',\r\n                yearStart: '',\r\n                yearEnd: '',\r\n            });\r\n\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        // this function handles the information edits\r\n        renderEditMode = () => {\r\n            return (\r\n                <div id=\"education-list-edit\">\r\n                    {this.state.education.map(element => {\r\n                        return (\r\n                            <div key={element.university + \"-container-edit\"}className=\"education-container\">\r\n                                <h3 key={element.university + \"-university-edit\"}className=\"education_university\">{element.university}</h3>\r\n                                <p key={element.university + \"-years-studied-edit\"}className=\"education_years\">{element.yearsStudied}</p>\r\n                                <p key={element.university + \"-degree-edit\"}className=\"education_degree\">{element.degree}</p>\r\n                                <button type=\"button\" className=\"button_delete-education\" onClick={() => this.deleteEducation(this.state.education.indexOf(element))}> <i className=\"far fa-trash-alt\"></i></button>\r\n                            </div>\r\n                        )\r\n                    })}\r\n\r\n                    <form id=\"basic-info-edit\">\r\n                        <label>University:\r\n                            <input value={this.state.newUniversity} onChange={this.handleNewUniversity}></input>\r\n                        </label>\r\n                        <label>Degree:\r\n                            <input value={this.state.newDegree} onChange={this.handleNewDegree}></input>\r\n                        </label>\r\n                        <label>Start year:\r\n                            <input value={this.state.yearStart} onChange={this.handleYearStart} placeholder=\"eg. 2018\"/>\r\n                        </label>\r\n                        <label>End year:\r\n                            <input value={this.state.yearEnd} onChange={this.handleYearEnd} placeholder=\"eg. 2020\"/>\r\n                        </label>\r\n                        <button type=\"button\" className=\"button_primary\" id=\"button_add-education\" onClick={this.addNewEducation}>Add Education <i className=\"fas fa-arrow-right\"></i></button>\r\n                    </form>\r\n                        <button type=\"button\" className=\"button_primary\" onClick={this.toggleEditMode}>Done</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    render() {\r\n\r\n    return (\r\n        <div id=\"education-parent\" className=\"section-container\">\r\n            <h2 id=\"education\">Education</h2>\r\n            {/* If edit mode is on, the component will re-render in edit mode. Otherwise it renders in display mode */}\r\n            {this.state.editMode\r\n            ? this.renderEditMode()\r\n            : <div id=\"education-experience-details\"> \r\n              {/* this function renders the list of education milestones */}\r\n                {this.state.education.map(element => {\r\n                   return (\r\n                        <div key={element.university + \"-container\"}className=\"education-container\">\r\n                            <h3 key={element.university + \"-university\"}className=\"education_university\">{element.university}</h3>\r\n                            <p key={element.university + \"-years-studied\"}className=\"education_years\">{element.yearsStudied}</p>\r\n                            <p key={element.university + \"-degree\"}className=\"education_degree\">{element.degree}</p>\r\n                        </div>\r\n                   )\r\n                })}\r\n                <button type=\"button\" className=\"button_edit\" onClick={this.toggleEditMode}><i className=\"far fa-edit\"></i></button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n};\r\n\r\n\r\n","import { BasicInfo } from \"./components/Basic-Info\";\nimport { Skills } from \"./components/Skills\";\nimport { Summary } from \"./components/Summary\";\nimport { WorkExperience } from \"./components/WorkExperience\";\nimport { Education } from \"./components/Education\";\nimport './styles/styles.css'\n\nconst App = () => {\n  return (\n    <div id=\"main-container\">\n        <header>\n          <h1>CV Builder</h1>\n          <a href=\"https://github.com/AndrewLeach94/cv-builder\">\n            <i className=\"fa fa-github\"></i>\n          </a>\n        </header>\n        <div id=\"cv_body\">\n          <BasicInfo />\n          <Skills />\n          <Summary />\n          <WorkExperience />\n          <Education />\n        </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}